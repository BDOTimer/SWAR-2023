#ifndef FLOT_GENERATOR_H
#define FLOT_GENERATOR_H

#include "generator.h"
#include "flot.h"

struct  FlotGenerator : public Generator
{       FlotGenerator(Flot&      flot) : Generator(cfg.C, cfg.R, false)
        {   FlotGenerator::generator(flot);
        }

private:
    void generator(Flot& flot)
    {
        std::vector<Point2i> palubs;

        for(const size_t n : cfg.rule)
        {
            ///------------------------------|
            /// Счётчик попыток(для защиты). |
            ///------------------------------:
            int cnt = 0;

            ///------------------------------|
            /// Ставим корабль.              |
            ///------------------------------:
            bool ready = true;
            do
            {
                ///------------------------------|
                /// На поле только такое ".z*"   |
                /// mayused должен быть пустой.  |
                ///------------------------------:
                ship_start_set();
                palubs.clear  ();

                ///------------------------------|
                /// Ставим первую палуб-макет ...|
                ///------------------------------:
                Point2i p;
                {   do
                    {   ///------------------------------|
                        /// Защита от вечного цикла.     |
                        ///------------------------------:
                        if(++cnt == 500)
                        {   throw(ERROR_("generate fail"));
                        }

                        p = this->rrand();
                    } while(F[p.y][p.x] != '.');
                }
                F[p.y][p.x] = '!'; ///<------ тут.

                palubs.push_back(p);

                ///------------------------------|
                /// Варианты для остальных палуб.|
                ///------------------------------:
                add2mayused(p);

                ///------------------------------|
                /// Ставим остальные палубы.     |
                ///------------------------------:
                for(size_t i = 0, N = n - 1; i < N; ++i)
                {
                    ///------------------------------|
                    /// Нет места - Начать заново!   |
                    ///------------------------------:
                    if(mayused.empty())
                    {   ready = false; break;
                    }

                    ///------------------------------|
                    /// Рандом возможного варианта.  |
                    ///------------------------------:
                    size_t      k = (size_t)myl::rrand(0, (int)mayused.size());
                    p = mayused[k];

                    ///------------------------------|
                    /// Удаляем использованный варик.|
                    ///------------------------------:
                    del_from_mayused(k);

                    ///------------------------------|
                    /// Добавляем арианты для палуб. |
                    ///------------------------------:
                    add2mayused(p);

                    ///------------------------------|
                    /// Ставим палубу-макет.         |
                    ///------------------------------:
                    F[p.y][p.x] = '!';
                    palubs.push_back(p);
                }

            } while(!ready);

            ///------------------------------|
            /// Узакониваем макет: '!' -> '*'|
            /// Ауру переводим в запрет.     |
            ///------------------------------:
            ship_end_set      (      );
            flot.insert_palubs(palubs);
        }

        ///------------------------------|
        /// Все корабли расставлены!     |
        ///------------------------------:
        clear_for_user();
    }
};

void testclass_FlotGenerator()
{   Flot          flot   ;
    FlotGenerator gen(flot)  ;
    std::cout  << gen << '\n';

    std::cout  << (flot.is_error() ? "FAIL ...\a" : "SUCCESS.") << '\n';

    flot.debug();
}
#endif // FLOT_GENERATOR_H

